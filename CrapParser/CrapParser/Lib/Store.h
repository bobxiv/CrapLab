//Esta instruccion preprocesador hace que solo se compile una vez, apesar de que se incluya en varios cpps
#pragma once


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////         Librearias que utilizo en el Encabezado       ///////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*///////////////////////////*/					#include <cmath>					  /*///////////////////////////*/
/*///////////////////////////*/					#include <iostream>					  /*///////////////////////////*/
/*///////////////////////////*/					#include <string>					  /*///////////////////////////*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////******************************************************///////////////////////////////




	///Nombre de espacios contenedor de todas las declaraciones y definiciones de la libreria
	///Contiene todas las estructuras de almacenamiento matematicas clasicas
namespace Store
{



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////       Encabezado de la Clase   CustomStorage		/////////////////////////////////
///////////////////////////////      Esta clase es le padre de Matrix y  Vector   	/////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



///Clase templatizada base para Matrix y Vector.
///Posee el miembro templatizado que contiene el tipo de datos de la Matriz o el Vector
///que se genere. Asimismo contiene funcionalidades, funciones virtuales.
///Estas existen solo para dar la posibilidad de utilizar polimorfismo si se requiere.
///@author Emmanuel Rojas Fredini
	template <class T>
class CustomStorage
{

protected:
	///Este Miembro contiene los datos
	T** MC;

public:

	///Se encarga de limpiar el arreglo de datos
	///@return void
	inline virtual void clean(){};

	///Se encarga de llenar el arreglo de datos
	///@param N  El valor con el que se rellenara el arreglo
	///@return void
	inline virtual void fill( T& N ){};


};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////     Fin del Encabezado de la clase  CustomStorage     ///////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//struct Header
#include "Headers_Modules\Utility.h"

//class Expression y defines
#include "Headers_Modules\Expression_Declaration.h"


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////             Encabezado de clase Vector                ///////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template<class T>
class Matrix;

#include "Headers_Modules\Vector_Interface.h"


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////          Fin del Encabezado de clase Vector           ///////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////             Encabezado de clase Matrix                ///////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Headers_Modules\Matrix_Interface.h"


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////           Fin del Encabezado de clase Matrix          ///////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////             Encabezado de clase MatrixX               ///////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		template <class T>
	class MatrixX:public Matrix<T>
	{
	private:




	public:




	};



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////           Fin del Encabezado de clase MatrixX         ///////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//Definiciones de Operaciones Aritmeticas amigas y no amigas
				//Esta en el punto h porque tiene templates, A y B y seria demasiado explicitarlos todos

	//Aritmetica de Vector

#include "Headers_Modules\Vector_Arithmetics.h"

	//Fin de Aritmetica de Vector





//Declaracion y Definicion
#include "Headers_Modules\Expression.h"


	//Comienzo los promote -----------------------------------------------------------------------------------------

#include "Headers_Modules\Promote.h"

	//Fin de los promote -------------------------------------------------------------------------------------------

	//Comienzo de Declaraciones y Definiciones de clases "mini arbol"

#include "Headers_Modules\RES_Base.h"

#include "Headers_Modules\Plus.h"

#include "Headers_Modules\Minus.h"

#include "Headers_Modules\Prod.h"

#include "Headers_Modules\Div.h"

	//Fin de Declaraciones y Definiciones de clases "mini arbol"

#include "Headers_Modules\template_cmath.h"


}//Fin del nombre de espacios Store, contenedor de 'esta libreria'



/** \file
 *  This C header file was generated by $ANTLR version 3.0.1
 *
 *     -  From the grammar source file : C:\\Users\\BOB\\Documents\\ANTLR Gramatics\\CrapGrammatic\\CrapGrammatic.g
 *     -                            On : 2008-12-17 06:36:29
 *     -                 for the lexer : CrapGrammaticLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 * View this file with tabs set to 8 (:set ts=8 in gvim) and indent at 4 (:set sw=4 in gvim)
 *
 * The lexer CrapGrammaticLexerhas the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCrapGrammaticLexer, which is returned from a call to CrapGrammaticLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the entry points are provided anyway.
 * * The entry points for CrapGrammaticLexer are  as follows:
 *
 *  - void      pCrapGrammaticLexer->PLUS(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->MINUS(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->PROD(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->PER_PROD(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->DIV(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->PER_DIV(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->POT(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->PER_POT(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->TRANS(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->EQUAL(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T20(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T21(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T22(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T23(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T24(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T25(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T26(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T27(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T28(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T29(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T30(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T31(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T32(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T33(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T34(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T35(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T36(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T37(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T38(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T39(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T40(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T41(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T42(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T43(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T44(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T45(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T46(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T47(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T48(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T49(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T50(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T51(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T52(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T53(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T54(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T55(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T56(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T57(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T58(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T59(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T60(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->T61(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->Number(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->Digit(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->SP(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->PreChar(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->PostChar(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->Variable(pCrapGrammaticLexer)
 *  - void      pCrapGrammaticLexer->Tokens(pCrapGrammaticLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_CrapGrammaticLexer_H
#define _CrapGrammaticLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef	WIN32
// Disable: Unreferenced parameter,                - Rules with parameters that are not used
//          constant conditional,                  - ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable        - tree rewrite vairables declared but not needed
//          Unreferenced local variable            - lexer rulle decalres but does not always use _type
//          potentially unitialized variable used  - retval always returned from a rule 
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4701 )
#endif



/** Context tracking structure for CrapGrammaticLexer
 */
typedef struct CrapGrammaticLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

    void (*mPLUS)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mMINUS)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mPROD)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mPER_PROD)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mDIV)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mPER_DIV)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mPOT)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mPER_POT)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mTRANS)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mEQUAL)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT20)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT21)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT22)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT23)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT24)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT25)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT26)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT27)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT28)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT29)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT30)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT31)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT32)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT33)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT34)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT35)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT36)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT37)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT38)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT39)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT40)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT41)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT42)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT43)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT44)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT45)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT46)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT47)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT48)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT49)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT50)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT51)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT52)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT53)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT54)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT55)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT56)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT57)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT58)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT59)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT60)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mT61)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mNumber)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mDigit)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mSP)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mPreChar)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mPostChar)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mVariable)	(struct CrapGrammaticLexer_Ctx_struct * ctx);
    void (*mTokens)	(struct CrapGrammaticLexer_Ctx_struct * ctx);    unsigned char * (*getGrammarFileName)();
    void	    (*free)   (struct CrapGrammaticLexer_Ctx_struct * ctx);
        
}
    CrapGrammaticLexer, * pCrapGrammaticLexer;

/* Function protoypes for the lexer functions that external translation units
 * may wish to call.
 */
ANTLR3_API pCrapGrammaticLexer CrapGrammaticLexerNew         (pANTLR3_INPUT_STREAM     instream);/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define PER_DIV      9
#define T29      29
#define T28      28
#define T27      27
#define T26      26
#define T25      25
#define EOF      -1
#define T24      24
#define T23      23
#define T22      22
#define T21      21
#define T20      20
#define TRANS      12
#define Variable      16
#define Number      15
#define POT      10
#define PER_PROD      7
#define EQUAL      13
#define PROD      6
#define PLUS      4
#define T38      38
#define T37      37
#define T39      39
#define T34      34
#define T33      33
#define T36      36
#define T35      35
#define T30      30
#define PreChar      17
#define T61      61
#define T32      32
#define T60      60
#define T31      31
#define PostChar      19
#define T49      49
#define T48      48
#define MINUS      5
#define Digit      18
#define T43      43
#define Tokens      62
#define T42      42
#define T41      41
#define T40      40
#define T47      47
#define T46      46
#define T45      45
#define T44      44
#define T50      50
#define SP      14
#define PER_POT      11
#define T59      59
#define DIV      8
#define T52      52
#define T51      51
#define T54      54
#define T53      53
#define T56      56
#define T55      55
#define T58      58
#define T57      57
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

/* End of token definitions for CrapGrammaticLexer
 * =============================================================================
 */
/** \} */

#endif
/* END - Note:Keep extra linefeed to satisfy UNIX systems */

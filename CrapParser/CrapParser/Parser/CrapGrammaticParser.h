/** \file
 *  This C header file was generated by $ANTLR version 3.0.1
 *
 *     -  From the grammar source file : C:\\Users\\BOB\\Documents\\ANTLR Gramatics\\CrapGrammatic\\CrapGrammatic.g
 *     -                            On : 2008-12-17 06:36:28
 *     -                for the parser : CrapGrammaticParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 * View this file with tabs set to 8 (:set ts=8 in gvim) and indent at 4 (:set sw=4 in gvim)
 *
 * The parser CrapGrammaticParserhas the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCrapGrammaticParser, which is returned from a call to CrapGrammaticParserNew().
 *
 * The entry points for CrapGrammaticParser are  as follows:
 *
 *  - CrapGrammaticParser_entry_return      pCrapGrammaticParser->entry(pCrapGrammaticParser)
 *  - CrapGrammaticParser_empty_return      pCrapGrammaticParser->empty(pCrapGrammaticParser)
 *  - CrapGrammaticParser_paren_return      pCrapGrammaticParser->paren(pCrapGrammaticParser)
 *  - CrapGrammaticParser_expression_return      pCrapGrammaticParser->expression(pCrapGrammaticParser)
 *  - CrapGrammaticParser_subterm_return      pCrapGrammaticParser->subterm(pCrapGrammaticParser)
 *  - CrapGrammaticParser_potence_return      pCrapGrammaticParser->potence(pCrapGrammaticParser)
 *  - CrapGrammaticParser_function_return      pCrapGrammaticParser->function(pCrapGrammaticParser)
 *  - CrapGrammaticParser_asignation_return      pCrapGrammaticParser->asignation(pCrapGrammaticParser)
 *  - CrapGrammaticParser_basic_array_return      pCrapGrammaticParser->basic_array(pCrapGrammaticParser)
 *  - CrapGrammaticParser_array_return      pCrapGrammaticParser->array(pCrapGrammaticParser)
 *  - CrapGrammaticParser_plot_return      pCrapGrammaticParser->plot(pCrapGrammaticParser)
 *  - CrapGrammaticParser_notprint_return      pCrapGrammaticParser->notprint(pCrapGrammaticParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_CrapGrammaticParser_H
#define _CrapGrammaticParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef	WIN32
// Disable: Unreferenced parameter,                - Rules with parameters that are not used
//          constant conditional,                  - ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable        - tree rewrite vairables declared but not needed
//          Unreferenced local variable            - lexer rulle decalres but does not always use _type
//          potentially unitialized variable used  - retval always returned from a rule 
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4701 )
#endif
typedef struct CrapGrammaticParser_entry_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_entry_return;

typedef struct CrapGrammaticParser_empty_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_empty_return;

typedef struct CrapGrammaticParser_paren_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_paren_return;

typedef struct CrapGrammaticParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_expression_return;

typedef struct CrapGrammaticParser_subterm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_subterm_return;

typedef struct CrapGrammaticParser_potence_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_potence_return;

typedef struct CrapGrammaticParser_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_function_return;

typedef struct CrapGrammaticParser_asignation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_asignation_return;

typedef struct CrapGrammaticParser_basic_array_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_basic_array_return;

typedef struct CrapGrammaticParser_array_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_array_return;

typedef struct CrapGrammaticParser_plot_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_plot_return;

typedef struct CrapGrammaticParser_notprint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    CrapGrammaticParser_notprint_return;





/** Context tracking structure for CrapGrammaticParser
 */
typedef struct CrapGrammaticParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

    CrapGrammaticParser_entry_return (*entry)	(struct CrapGrammaticParser_Ctx_struct * ctx);
    CrapGrammaticParser_empty_return (*empty)	(struct CrapGrammaticParser_Ctx_struct * ctx);
    CrapGrammaticParser_paren_return (*paren)	(struct CrapGrammaticParser_Ctx_struct * ctx);
    CrapGrammaticParser_expression_return (*expression)	(struct CrapGrammaticParser_Ctx_struct * ctx);
    CrapGrammaticParser_subterm_return (*subterm)	(struct CrapGrammaticParser_Ctx_struct * ctx);
    CrapGrammaticParser_potence_return (*potence)	(struct CrapGrammaticParser_Ctx_struct * ctx);
    CrapGrammaticParser_function_return (*function)	(struct CrapGrammaticParser_Ctx_struct * ctx);
    CrapGrammaticParser_asignation_return (*asignation)	(struct CrapGrammaticParser_Ctx_struct * ctx);
    CrapGrammaticParser_basic_array_return (*basic_array)	(struct CrapGrammaticParser_Ctx_struct * ctx);
    CrapGrammaticParser_array_return (*array)	(struct CrapGrammaticParser_Ctx_struct * ctx);
    CrapGrammaticParser_plot_return (*plot)	(struct CrapGrammaticParser_Ctx_struct * ctx);
    CrapGrammaticParser_notprint_return (*notprint)	(struct CrapGrammaticParser_Ctx_struct * ctx);    unsigned char * (*getGrammarFileName)();
    void	    (*free)   (struct CrapGrammaticParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
}
    CrapGrammaticParser, * pCrapGrammaticParser;

/* Function protoypes for the parser functions that external translation units
 * may wish to call.
 */
ANTLR3_API pCrapGrammaticParser CrapGrammaticParserNew         (pANTLR3_COMMON_TOKEN_STREAM     instream);/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define PER_DIV      9
#define PostChar      19
#define MINUS      5
#define Digit      18
#define EOF      -1
#define TRANS      12
#define Variable      16
#define Number      15
#define PER_PROD      7
#define POT      10
#define SP      14
#define EQUAL      13
#define PROD      6
#define PER_POT      11
#define PLUS      4
#define DIV      8
#define PreChar      17
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

/* End of token definitions for CrapGrammaticParser
 * =============================================================================
 */
/** \} */

#endif
/* END - Note:Keep extra linefeed to satisfy UNIX systems */
